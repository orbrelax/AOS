1)Write a C program to find whether a given file is present in current directory or not

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *filename = argv[1];

    FILE *file = fopen(filename, "r");

    if (file != NULL) {
        printf("File '%s' is present in the current directory.\n", filename);
        fclose(file);
    } else {
        printf("File '%s' is not present in the current directory.\n", filename);
    }

    return 0;
}

=====================================================================
2)Write a C program to create an unnamed pipe. The child process will write following three messages to pipe and parent process display it.
Message1 = “Hello World”
Message2 = “Hello SPPU”
Message3 = “Linux is Funny”

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    int pipefd[2];
    pid_t childPid;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Create a child process
    childPid = fork();

    if (childPid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (childPid == 0) { // Child process
        // Close the read end of the pipe
        close(pipefd[0]);

        // Write messages to the pipe
        const char *messages[] = {"Hello World\n", "Hello SPPU\n", "Linux is Funny\n"};

        for (int i = 0; i < 3; i++) {
            write(pipefd[1], messages[i], strlen(messages[i]));
        }

        // Close the write end of the pipe
        close(pipefd[1]);

        exit(EXIT_SUCCESS);
    } else { // Parent process
        // Close the write end of the pipe
        close(pipefd[1]);

        // Read and display messages from the pipe
        char buffer[256];
        ssize_t bytesRead;

        while ((bytesRead = read(pipefd[0], buffer, sizeof(buffer))) > 0) {
            write(STDOUT_FILENO, buffer, bytesRead);
        }

        // Close the read end of the pipe
        close(pipefd[0]);

        // Wait for the child process to finish
        wait(NULL);
    }

    return 0;
}
