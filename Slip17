1)Read the current directory and display the name of the files, no of files in current directory
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *dir;
    struct dirent *entry;

    // Open the current directory
    dir = opendir(".");

    if (dir == NULL) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }

    // Count the number of files
    int fileCount = 0;

    // Iterate through directory entries
    printf("Files in the current directory:\n");
    while ((entry = readdir(dir)) != NULL) {
        // Skip "." and ".." entries
        if (entry->d_name[0] != '.') {
            printf("%s\n", entry->d_name);
            fileCount++;
        }
    }

    // Close the directory
    closedir(dir);

    // Display the total number of files
    printf("Total number of files: %d\n", fileCount);

    return 0;
}

=======================================================================
2) Write a C program to implement the following unix/linux command (use fork, pipe and exec system call). Your program should block the signal Ctrl-C and Ctrl-\ signal during the execution. i. Ls –l | wc –l
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>

void signalHandler(int signum) {
    // Signal handler for Ctrl-C (SIGINT) and Ctrl-\ (SIGQUIT)
    // This handler is empty, effectively blocking the signals
}

int main() {
    // Set up signal handlers to block Ctrl-C and Ctrl-\ signals
    signal(SIGINT, signalHandler);
    signal(SIGQUIT, signalHandler);

    pid_t childPid;
    int pipefd[2];

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Create a child process
    childPid = fork();

    if (childPid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (childPid == 0) { // Child process
        // Close the write end of the pipe
        close(pipefd[1]);

        // Redirect standard input to read from the pipe
        dup2(pipefd[0], STDIN_FILENO);

        // Execute wc -l command
        execlp("wc", "wc", "-l", (char *)NULL);

        // If exec fails
        perror("Exec failed");
        exit(EXIT_FAILURE);
    } else { // Parent process
        // Close the read end of the pipe
        close(pipefd[0]);

        // Redirect standard output to write to the pipe
        dup2(pipefd[1], STDOUT_FILENO);

        // Execute ls -l command
        execlp("ls", "ls", "-l", (char *)NULL);

        // If exec fails
        perror("Exec failed");
        exit(EXIT_FAILURE);
    }

    return 0;
}
