1)Write a program that illustrates how to execute two commands concurrently with a pipe.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipefd[2];
    pid_t child1, child2;

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Create the first child process
    child1 = fork();

    if (child1 == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (child1 == 0) { // First child process
        // Close the read end of the pipe
        close(pipefd[0]);

        // Redirect stdout to the write end of the pipe
        dup2(pipefd[1], STDOUT_FILENO);

        // Close the write end of the pipe
        close(pipefd[1]);

        // Execute the first command (e.g., ls -l)
        execlp("ls", "ls", "-l", (char *)NULL);
        perror("Exec failed");
        exit(EXIT_FAILURE);
    }

    // Create the second child process
    child2 = fork();

    if (child2 == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (child2 == 0) { // Second child process
        // Close the write end of the pipe
        close(pipefd[1]);

        // Redirect stdin to the read end of the pipe
        dup2(pipefd[0], STDIN_FILENO);

        // Close the read end of the pipe
        close(pipefd[0]);

        // Execute the second command (e.g., wc -l)
        execlp("wc", "wc", "-l", (char *)NULL);
        perror("Exec failed");
        exit(EXIT_FAILURE);
    }

    // Close both ends of the pipe in the parent process
    close(pipefd[0]);
    close(pipefd[1]);

    // Wait for both child processes to finish
    waitpid(child1, NULL, 0);
    waitpid(child2, NULL, 0);

    return 0;
}

=====================================================================
2)Generate parent process to write unnamed pipe and will write into it. Also generate child process which will read from pipe

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 100

int main() {
    int pipefd[2];
    pid_t childPid;
    char message[] = "Hello from Parent Process!";
    char buffer[BUFFER_SIZE];

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Create a child process
    childPid = fork();

    if (childPid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (childPid == 0) { // Child process
        // Close the write end of the pipe
        close(pipefd[1]);

        // Read from the pipe
        ssize_t bytesRead = read(pipefd[0], buffer, BUFFER_SIZE);

        if (bytesRead == -1) {
            perror("Read from pipe failed");
            exit(EXIT_FAILURE);
        }

        // Print the message received from the parent
        printf("Child Process: Received message from Parent: %s\n", buffer);

        // Close the read end of the pipe
        close(pipefd[0]);

        exit(EXIT_SUCCESS);
    } else { // Parent process
        // Close the read end of the pipe
        close(pipefd[0]);

        // Write to the pipe
        if (write(pipefd[1], message, sizeof(message)) == -1) {
            perror("Write to pipe failed");
            close(pipefd[1]);
            exit(EXIT_FAILURE);
        }

        // Close the write end of the pipe
        close(pipefd[1]);

        // Wait for the child process to finish
        wait(NULL);
    }

    return 0;
}
