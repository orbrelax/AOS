1)
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void printInodeAndType(char *filename) {
    struct stat fileInfo;

    // Get file information
    if (stat(filename, &fileInfo) == -1) {
        perror("Error getting file information");
        exit(EXIT_FAILURE);
    }

    // Print the inode number and file type
    printf("File: %s\n", filename);
    printf("Inode number: %ld\n", (long)fileInfo.st_ino);

    if (S_ISREG(fileInfo.st_mode)) {
        printf("File type: Regular file\n");
    } else if (S_ISDIR(fileInfo.st_mode)) {
        printf("File type: Directory\n");
    } else if (S_ISCHR(fileInfo.st_mode)) {
        printf("File type: Character special file\n");
    } else if (S_ISBLK(fileInfo.st_mode)) {
        printf("File type: Block special file\n");
    } else if (S_ISFIFO(fileInfo.st_mode)) {
        printf("File type: FIFO or pipe\n");
    } else if (S_ISLNK(fileInfo.st_mode)) {
        printf("File type: Symbolic link\n");
    } else if (S_ISSOCK(fileInfo.st_mode)) {
        printf("File type: Socket\n");
    } else {
        printf("File type: Unknown\n");
    }

    printf("\n");
}

int main(int argc, char *argv[]) {
    // Check if filenames are provided
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <file1> <file2> ... <fileN>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Process each filename
    for (int i = 1; i < argc; ++i) {
        printInodeAndType(argv[i]);
    }

    return 0;
}
-----------------------------------------------------------------------------------------
2)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

void alarmHandler(int signum) {
    printf("Alarm is fired! Received signal: %d\n", signum);
    exit(EXIT_SUCCESS);
}

int main() {
    // Set up signal handler for SIGALRM
    signal(SIGALRM, alarmHandler);

    // Create a child process
    pid_t pid = fork();

    if (pid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        sleep(2); // Sleep for 2 seconds
        // Send SIGALRM to the parent process
        kill(getppid(), SIGALRM);
    } else { // Parent process
        printf("Waiting for the alarm...\n");
        // Wait for the child process to finish
        wait(NULL);
        printf("Parent process exiting.\n");
    }

    return 0;
}
