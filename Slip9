1)Generate parent process to write unnamed pipe and will read from it

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 100

int main() {
    int pipefd[2];
    pid_t childPid;
    char message[] = "Hello from Parent Process!";

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Create a child process
    childPid = fork();

    if (childPid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (childPid == 0) { // Child process
        // Close the write end of the pipe
        close(pipefd[1]);

        char buffer[BUFFER_SIZE];
        ssize_t bytesRead;

        // Read from the pipe
        bytesRead = read(pipefd[0], buffer, BUFFER_SIZE);

        if (bytesRead == -1) {
            perror("Read from pipe failed");
            exit(EXIT_FAILURE);
        }

        // Print the message received from the parent
        printf("Child Process: Received message from Parent: %s\n", buffer);

        // Close the read end of the pipe
        close(pipefd[0]);

        exit(EXIT_SUCCESS);
    } else { // Parent process
        // Close the read end of the pipe
        close(pipefd[0]);

        // Write to the pipe
        if (write(pipefd[1], message, sizeof(message)) == -1) {
            perror("Write to pipe failed");
            close(pipefd[1]);
            exit(EXIT_FAILURE);
        }

        // Close the write end of the pipe
        close(pipefd[1]);

        // Wait for the child process to finish
        wait(NULL);
    }

    return 0;
}

====================================================================================
2)Write a C program to Identify the type (Directory, character device, Block device, Regular file, FIFO or pipe, symbolic link or socket) of given file using stat() system call.

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

void identifyFileType(const char *filename) {
    struct stat fileInfo;

    // Get file information
    if (stat(filename, &fileInfo) == 0) {
        // Check file type
        if (S_ISDIR(fileInfo.st_mode)) {
            printf("%s is a Directory.\n", filename);
        } else if (S_ISCHR(fileInfo.st_mode)) {
            printf("%s is a Character Device.\n", filename);
        } else if (S_ISBLK(fileInfo.st_mode)) {
            printf("%s is a Block Device.\n", filename);
        } else if (S_ISREG(fileInfo.st_mode)) {
            printf("%s is a Regular File.\n", filename);
        } else if (S_ISFIFO(fileInfo.st_mode)) {
            printf("%s is a FIFO (Named Pipe).\n", filename);
        } else if (S_ISLNK(fileInfo.st_mode)) {
            printf("%s is a Symbolic Link.\n", filename);
        } else if (S_ISSOCK(fileInfo.st_mode)) {
            printf("%s is a Socket.\n", filename);
        } else {
            printf("%s is of Unknown Type.\n", filename);
        }
    } else {
        perror("Error getting file information");
    }
}

int main(int argc, char *argv[]) {
    // Check if a filename is provided
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <filename>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    // Identify the file type
    identifyFileType(argv[1]);

    return 0;
}
